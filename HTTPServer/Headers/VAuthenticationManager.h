/*
* This file is part of Wakanda software, licensed by 4D under
*  (i) the GNU General Public License version 3 (GNU GPL v3), or
*  (ii) the Affero General Public License version 3 (AGPL v3) or
*  (iii) a commercial license.
* This file remains the exclusive property of 4D and/or its licensors
* and is protected by national and international legislations.
* In any event, Licensee's compliance with the terms and conditions
* of the applicable license constitutes a prerequisite to any use of this file.
* Except as otherwise expressly stated in the applicable license,
* such license does not include any other license or rights on this file,
* 4D's and/or its licensors' trademarks and/or other proprietary rights.
* Consequently, no title, copyright or other proprietary rights
* other than those specified in the applicable license is granted.
*/
#ifndef __AUTHENTICATION_MANAGER_INCLUDED__
#define __AUTHENTICATION_MANAGER_INCLUDED__


class CSecurityManager;
class VAuthenticationManager;


//--------------------------------------------------------------------------------------------------


class VAuthenticationInfos : public IAuthenticationInfos
{
	friend class VAuthenticationManager;

public:
									VAuthenticationInfos();
									VAuthenticationInfos (const VAuthenticationInfos& inAuthenticationInfos);
	virtual							~VAuthenticationInfos();
	VAuthenticationInfos&			operator = (const VAuthenticationInfos& inAuthenticationInfos);

	/* Common Getters */
	HTTPAuthenticationMethod		GetAuthenticationMethod() const { return fAuthenticationMethod; }
	void							GetUserName (XBOX::VString& outValue) const { outValue.FromString (fUserName); }
	void							GetUserGroup (XBOX::VString& outValue) const { outValue.FromString (fUserGroup); }
	void							GetPassword (XBOX::VString& outValue) const { outValue.FromString (fPassword); }
	CUAGSession*					GetUAGSession() const { return fUAGSession; };
	void							GetRealm (XBOX::VString& outValue) const { outValue.FromString (fRealm); }
	HTTPRequestMethod				GetHTTPRequestMethod() const { return fHTTPRequestMethod; }
	void							GetHTTPRequestMethodName (XBOX::VString& outValue) const;

	/* Used for KERBEROS */
	void							GetKerberosTicket (XBOX::VString& outValue) const { outValue.FromString (fKerberosTicket); }

	/* Used for DIGEST-MD5 */
	void							GetNonce (XBOX::VString& outValue) const { outValue.FromString (fNonce); }				//	Random values sent to the client to generate his response
	void							GetOpaque (XBOX::VString& outValue) const { outValue.FromString (fOpaque); }			//	Random values sent to the client
	void							GetCnonce (XBOX::VString& outValue) const { outValue.FromString (fCnonce); }			//	Random values generated by the client to generate his response
	void							GetQop (XBOX::VString& outValue) const { outValue.FromString (fQop); }					// 	"Quality of Protection" Auth stands for authentification and Auth-int stands for authentification with integrity protection
	void							GetNonceCount (XBOX::VString& outValue) const { outValue.FromString (fNonceCount); }	//	The hexadecimal count of the number of requests
	void							GetAlgorithm (XBOX::VString& outValue) const { outValue.FromString (fAlgorithm); }		//	The algorithm used to generate the digest hash
	void							GetResponse (XBOX::VString& outValue) const { outValue.FromString (fResponse); }		//	digest response of the client
	void							GetURI (XBOX::VString& outValue) const { outValue.FromString (fURI); }
	void							GetDomain (XBOX::VString& outValue) const { outValue.FromString (fDomain); }

	bool							NeedAddUAGSession() const { return fNeedAddUAGSession; };
	void							UAGSessionHasChanged() { fNeedAddUAGSession = true; };

	/* Common Setters */
	void							SetAuthenticationMethod (HTTPAuthenticationMethod inValue) { fAuthenticationMethod = inValue; }
	void							SetUserName (const XBOX::VString& inValue) { fUserName.FromString (inValue); }
	void							SetUserGroup (const XBOX::VString& inValue) { fUserGroup.FromString (inValue); }
	void							SetPassword (const XBOX::VString& inValue) { fPassword.FromString (inValue); }
	void							SetUAGSession(CUAGSession* inSession) { XBOX::CopyRefCountable(&fUAGSession, inSession); };
	void							SetRealm (const XBOX::VString& inValue) { fRealm.FromString (inValue); }
	void							SetHTTPRequestMethod (HTTPRequestMethod inValue) { fHTTPRequestMethod = inValue; }

	/* Used for KERBEROS */
	void							SetKerberosTicket (const XBOX::VString& inValue) { fKerberosTicket.FromString (inValue); }

	/* Used for DIGEST-MD5 */
	void							SetNonce (const XBOX::VString& inValue) { fNonce.FromString (inValue); }
	void							SetOpaque (const XBOX::VString& inValue) { fOpaque.FromString (inValue); }
	void							SetCnonce (const XBOX::VString& inValue) { fCnonce.FromString (inValue); }
	void							SetQop (const XBOX::VString& inValue) { fQop.FromString (inValue); }
	void							SetNonceCount (const XBOX::VString& inValue) { fNonceCount.FromString (inValue); }
	void							SetAlgorithm (const XBOX::VString& inValue) { fAlgorithm.FromString (inValue); }
	void							SetResponse (const XBOX::VString& inValue) { fResponse.FromString (inValue); }
	void							SetURI (const XBOX::VString& inValue) { fURI.FromString (inValue); }
	void							SetDomain (const XBOX::VString& inValue) { fDomain.FromString (inValue); }

	void							Clear();
	bool							IsValid() const;
	bool							IsValidForKerberos() const;

protected:
	HTTPAuthenticationMethod		fAuthenticationMethod;
	XBOX::VString					fUserName;
	XBOX::VString					fUserGroup;
	XBOX::VString					fPassword;
	CUAGSession*					fUAGSession;
	bool							fAlreadyParsed, fNeedAddUAGSession;
	XBOX::VString					fRealm;
	HTTPRequestMethod				fHTTPRequestMethod;

	/* Used for KERBEROS */
	XBOX::VString					fKerberosTicket;

	/* Used for DIGEST-MD5 */
	XBOX::VString 					fNonce;
	XBOX::VString 					fOpaque;
	XBOX::VString 					fCnonce;
	XBOX::VString 					fQop;
	XBOX::VString 					fNonceCount;
	XBOX::VString 					fAlgorithm;
	XBOX::VString 					fResponse;
	XBOX::VString					fURI;
	XBOX::VString					fDomain;
};


class VAuthenticationManager : public XBOX::VObject, public IAuthenticationManager
{
public:
									VAuthenticationManager();
	virtual							~VAuthenticationManager();

	static VAuthenticationInfos *	CreateAuthenticationInfosFromHeader (const XBOX::VHTTPHeader& inHeader, const HTTPRequestMethod inMethod);

	virtual XBOX::VError			CheckAndValidateAuthentication (IHTTPResponse *ioResponse);
	virtual XBOX::VError			SetAuthorizationHeader (IHTTPResponse *ioResponse);
	virtual VAuthenticationReferee *GetAuthenticationReferee() { return fAuthenticationReferee; }

	void							SetSecurityManager (CSecurityManager *inSecurityManager);
	const CSecurityManager *		GetSecurityManager() const { return fSecurityManager; }

	void							SetAuthenticationDelegate( IAuthenticationDelegate *inAuthenticationDelegate);

	/* Used to check user below to AdminGroup to grant access to specail URLs /debugInfos, /cache */
	XBOX::VError					CheckAdminAccessGranted (IHTTPResponse *ioResponse);

private:
	bool							_ValidateAuthentication (IAuthenticationInfos *ioAuthenticationInfos, const IHTTPRequest *inRequest);

	/* Used for DIGEST-MD5 */
	static void						_PopulateAuthenticationParameters (const XBOX::VString& inAuthorizationHTTPField, VAuthenticationInfos& outAuthenticationInfos);
	bool							_IsValidNonce (const VAuthenticationInfos& inAuthenticationInfos);	// Checks if the server nonce returned by the client is not too old (< 120 seconds), and if it was generated by the server

private:
	CSecurityManager *				fSecurityManager;
	VAuthenticationReferee *		fAuthenticationReferee;
	IAuthenticationDelegate*		fAuthenticationDelegate;
};


#endif	// __AUTHENTICATION_MANAGER_INCLUDED__

