/*
* This file is part of Wakanda software, licensed by 4D under
*  (i) the GNU General Public License version 3 (GNU GPL v3), or
*  (ii) the Affero General Public License version 3 (AGPL v3) or
*  (iii) a commercial license.
* This file remains the exclusive property of 4D and/or its licensors
* and is protected by national and international legislations.
* In any event, Licensee's compliance with the terms and conditions
* of the applicable license constitutes a prerequisite to any use of this file.
* Except as otherwise expressly stated in the applicable license,
* such license does not include any other license or rights on this file,
* 4D's and/or its licensors' trademarks and/or other proprietary rights.
* Consequently, no title, copyright or other proprietary rights
* other than those specified in the applicable license is granted.
*/
#include "HTTPServer.h"


//--------------------------------------------------------------------------------------------------


const sLONG8 CONST_NONCE_TIMEOUT = 120000L;


//--------------------------------------------------------------------------------------------------


static
void CreateNewSID (XBOX::VString& outNonce)
{
	// need some entropy ? Here is some:

	XBOX::VTime		curTime;
	XBOX::VString	md5String;
	XBOX::VUUID		uid (true);
	XBOX::VString	uidString;

	uid.GetString (uidString);
	curTime.FromSystemTime();

	md5String.FromLong8 (curTime.GetMilliseconds());
	md5String.AppendUniChar (CHAR_COLON);
	md5String.AppendLong (XBOX::VSystem::Random (false));
	md5String.AppendUniChar (CHAR_COLON);
	md5String.AppendString (uidString);

	XBOX::VChecksumMD5::GetChecksumFromStringUTF8Hexa (md5String, outNonce);
}


//--------------------------------------------------------------------------------------------------


VNonce::VNoncePile		VNonce::fNoncePile;
XBOX::VCriticalSection	VNonce::fNoncePileCriticalSection;


VNonce::VNonce (const XBOX::VString& inNonceValue, const sLONG8 inNonceCreationTime)
: fNonce (inNonceValue)
, fNonceCreationTime (inNonceCreationTime)
{
}


VNonce::~VNonce()
{
}


/* static */
void VNonce::GetNewNonceValue (XBOX::VString& outNonceValue)
{
	XBOX::VString	nonceRandomValue; 
	XBOX::VTime		curTime;
	sLONG8			nonceTime = 0;

	CreateNewSID (nonceRandomValue);

	curTime.FromSystemTime();
	nonceTime = curTime.GetMilliseconds();

	// Adding the nonce to the pile
	VNonce *nonce = new VNonce (nonceRandomValue, nonceTime);
	if (NULL != nonce)
	{
		if (fNoncePileCriticalSection.Lock())
			fNoncePile.push_back (nonce);	// we add in tail so that the oldest elements are in first to accelerate afterwards
		fNoncePileCriticalSection.Unlock();
	}

	outNonceValue.FromLong8 (nonceTime);
	outNonceValue.AppendUniChar (CHAR_COLON);
	outNonceValue.AppendString (nonceRandomValue);

}


/* static */
bool VNonce::ValidNonceAndCleanPile (const XBOX::VString& inNonceString)
{
	bool			isOK = false;
	XBOX::VTaskLock locker (&fNoncePileCriticalSection);

	for (VNoncePile::iterator it = fNoncePile.begin(); it != fNoncePile.end(); /*++it*/)
	{
		VNonce *curNonce = (*it);

		// we do some cleanup in the pile : we delete the nonces which are too old
		if (!curNonce->IsStillValid())
		{
			fNoncePile.erase (it);
			if (!fNoncePile.size())
				break;
			it = fNoncePile.begin();
		}
		else
		{
			if (HTTPServerTools::EqualASCIIVString (curNonce->GetNonceValue(), inNonceString))
			{
				// the random values correspond to values generated by the server
				isOK = true;
				fNoncePile.erase (it);
				break;
			}

			++it; // YT 07-Oct-2011 - ACI0073328
		}
	}

	return isOK;
}


/* static */
bool VNonce::ParseNonceValue (const XBOX::VString& inNonceValue, XBOX::VString& outNonceTime, XBOX::VString& outNonceRandomValue)
{
	/*
		- The fNonce field looks like :  1068215347:7307f04f919115ff129c7f2d9fb0214c
		- The first part (before ':') of the nonce is the time in seconds when the nonce was generated.
		- The second part is random values.
	*/

	outNonceTime.Clear();
	outNonceRandomValue.Clear();

	sLONG pos = inNonceValue.FindUniChar (CHAR_COLON);
	if (pos > 0)
	{
		XBOX::VString	nonceTimeValue;
		XBOX::VString	nonceRandomValue;

		inNonceValue.GetSubString (1, pos - 1, outNonceTime);
		inNonceValue.GetSubString (pos + 1, inNonceValue.GetLength() - pos, outNonceRandomValue);
	}
	
	return (!outNonceTime.IsEmpty() && !outNonceRandomValue.IsEmpty());
}


void VNonce::SetNonceValue (const XBOX::VString& inValue)
{
	if (!inValue.IsEmpty())
		fNonce.FromString (inValue);
}


bool VNonce::IsStillValid()
{
	XBOX::VTime	curTime;
	sLONG8		timeOfNow = 0;

	curTime.FromSystemTime();
	timeOfNow = curTime.GetMilliseconds();

	if ((fNonceCreationTime >= (timeOfNow - CONST_NONCE_TIMEOUT)) && (fNonceCreationTime <= timeOfNow)) // only valid for 2 minutes
		return true;
	else 
		return false;
}


