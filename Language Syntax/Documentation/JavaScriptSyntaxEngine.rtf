{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31506\stshfloch31506\stshfhich31506\stshfbi31507\deflang1036\deflangfe1036\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f36\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f39\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f40\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f42\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f43\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f44\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f45\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f46\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f47\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f399\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\f400\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}
{\f402\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\f403\fbidi \froman\fcharset162\fprq2 Cambria Tur;}{\f406\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\f409\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\f410\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\f412\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f413\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f416\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}
{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}
{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\caccentone\ctint255\cshade191\red54\green95\blue145;\caccentone\ctint255\cshade255\red79\green129\blue189;
\ctexttwo\ctint255\cshade191\red23\green54\blue93;\ctextone\ctint127\cshade255\red128\green128\blue128;}{\*\defchp \f31506\fs22\lang1033\langfe1033\langnp1033\langfenp1033 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 
\ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 \styrsid8586082 Normal;}{\s1\ql \li0\ri0\sb480\sl276\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 \b\fs28\cf17\lang1033\langfe1033\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 \slink19 \sqformat \spriority9 \styrsid5460159 heading 1;}{\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af31503\afs26\alang1025 
\ltrch\fcs0 \b\fs26\cf18\lang1033\langfe1033\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink20 \sunhideused \sqformat \spriority9 \styrsid9596931 heading 2;}{\*\cs10 \additive 
\ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused \sqformat Normal Table;}{
\s15\ql \li0\ri0\sa300\widctlpar\brdrb\brdrs\brdrw20\brsp80\brdrcf18 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\contextualspace \rtlch\fcs1 \af31503\afs52\alang1025 \ltrch\fcs0 
\fs52\expnd1\expndtw5\cf19\lang1033\langfe1033\kerning28\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink16 \sqformat \spriority10 \styrsid5460159 Title;}{\*\cs16 \additive \rtlch\fcs1 \af31503\afs52 
\ltrch\fcs0 \fs52\expnd1\expndtw5\cf19\kerning28\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink15 \slocked \spriority10 \styrsid5460159 Titre Car;}{\s17\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext17 \sqformat \spriority1 \styrsid5460159 No Spacing;}{\*\cs18 \additive \rtlch\fcs1 \ai\af0 \ltrch\fcs0 \i\cf20 
\sbasedon10 \sqformat \spriority19 \styrsid5460159 Subtle Emphasis;}{\*\cs19 \additive \rtlch\fcs1 \ab\af31503\afs28 \ltrch\fcs0 \b\fs28\cf17\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink1 \slocked \spriority9 \styrsid5460159 Titre 1 Car;}{\*
\cs20 \additive \rtlch\fcs1 \ab\af31503\afs26 \ltrch\fcs0 \b\fs26\cf18\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink2 \slocked \spriority9 \styrsid9596931 Titre 2 Car;}}{\*\rsidtbl \rsid1749\rsid28186\rsid1458114\rsid3042384\rsid3230526
\rsid4998869\rsid5460159\rsid6040534\rsid7079078\rsid7686517\rsid8586082\rsid9596931\rsid10095861\rsid10231289\rsid10317151\rsid10555661\rsid10952469\rsid11686004\rsid11863093\rsid11878175\rsid12612038\rsid12782558}{\mmathPr\mmathFont34\mbrkBin0
\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Aaron Ballman}{\operator laurent esnault}{\creatim\yr2010\mo7\dy26\hr14\min39}{\revtim\yr2010\mo7\dy26\hr14\min39}{\version2}{\edmins1}
{\nofpages7}{\nofwords3100}{\nofchars17053}{\nofcharsws20113}{\vern32771}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\hyphhotz425\trackmoves1\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1
\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot5460159\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid8586082\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\s15\ql \li0\ri0\sa300\widctlpar\brdrb\brdrs\brdrw20\brsp80\brdrcf18 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5460159\contextualspace \rtlch\fcs1 \af31503\afs52\alang1025 
\ltrch\fcs0 \fs52\expnd1\expndtw5\cf19\lang1033\langfe1033\kerning28\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \lang1036\langfe1033\langnp1036\insrsid5460159\charrsid3042384 
\hich\af31502\dbch\af31501\loch\f31502 JavaScript Syntax Engine Design Document}{\rtlch\fcs1 \af31503 \ltrch\fcs0 \lang1036\langfe1033\langnp1036\insrsid8586082\charrsid3042384 
\par }\pard\plain \ltrpar\s17\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5460159 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 
\ai\af31507 \ltrch\fcs0 \cs18\i\cf20\lang1036\langfe1033\langnp1036\insrsid5460159\charrsid3042384 Aaron Ballman (aaron@aaronballman.com)
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 
\af31507 \ltrch\fcs0 \lang1036\langfe1033\langnp1036\insrsid5460159\charrsid3042384 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid5460159 The JavaScript Syntax Engine is comprised of several major components which coordinate to provide syntax highlighting and autocomplete
 support.  This document will detail each of the components, and how they interact together to provide that support.
\par }\pard\plain \ltrpar\s1\ql \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid5460159 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 
\b\fs28\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid5460159 \hich\af31502\dbch\af31501\loch\f31502 Symbol Table
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4998869 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid9596931 The }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid9596931\charrsid9596931 symbol table}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid9596931 
 is a hierarchy of defined entities in the user's project.  Some entities may have names (such as local variab
les, or public properties), and others may be nameless (such as anonymous functions, or object literals).   All of the entities within the symbol table are called }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid9596931 symbols}{\rtlch\fcs1 \af31507 
\ltrch\fcs0 \insrsid9596931 .  While you can conceptualize the symbol table as a tree structure, the actual data s
tored within the table is unidirectional -- from the bottom (leaves) up.  This means that a symbol has a reference to its owner, but not to its children.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid4998869 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9596931 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid9596931 
The symbol table information is stored in a DB4D database.  The schema for the database can be found }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid9596931\charrsid9596931 in the comments of the InitializeNewDatabase f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 
\insrsid9596931 unction in SymbolTable.cpp.  There are three main tables (Symbols, Files, ExtraInfo) and one corollary table (Version).  The Version table stores information about the symbol table version, so you can determine 
whether you are working with an older schema in a newer source base.  The Symbol s table stores all information pertaining to individual symbols, while the Files table allows you to correlate the symbols back to their originating file.  The ExtraInfo tabl
e is used so that you can assign non-symbolic information to a symbol, though its usage is now considered deprecated.
\par The symbol table functionality is split into two main classes internally, and referenced via a single interface externally.  The ISymbolTab
le interface is how consumers access the symbol table.  The SymbolTable class is the private concrete class which implements the ISymbolTable functionality.  However, it is just a thin wrapper around SymbolTable::InnerSymbolTable.  The inner symbol table 
i
s where all of the actual database work happens -- the outer symbol table allows us to wrap the inner symbol table in a thread-safe manner that's opaque to the consumer.  The outer symbol table simply retains a reference to a database context, and the sha
red inner symbol table.  Each thread can reference the same inner symbol table,  so long as the per-thread outer symbol table has a unique database context.
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid11686004 Symbols and files are exposed via the Symbols::ISymbol and Symbols::IFile interfaces.  Internally, t
he VSymbol and VSymbolFile concrete classes implement their respective interfaces.  When a symbol is loaded from the database, all related information is also loaded (there is no partial load support) -- this means that related symbols are also loaded up,
 
such as the prototype chain, owner symbols, return types, etc.  This is why the symbol table only stores symbol information in a unidirectional manner.  If we loaded all child symbols, then it is possible to load a significant percentage of the overall sy
mbol structure.  By loading only upwards, we can make an easier trade-off between speed and memory consumption.
\par }\pard\plain \ltrpar\s1\ql \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid5460159 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 
\b\fs28\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid5460159 \hich\af31502\dbch\af31501\loch\f31502 Lexer
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4998869 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid11686004 The }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid11686004 lexer}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid11686004 
 is responsible for taking a stream of text (source code), and converting it into a stream of }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid11686004 tokens}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid11686004 .  It's also frequently referr
ed to as a tokenizer or scanner for this reason.  The JavaScript lexer takes }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526 two}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid11686004  approach}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526 es}{
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid11686004  to the }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526 lexing }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid11686004 problem}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526 
 by providing a pull model, and a push model for tokenization.  With the pull model, you feed the lexer a source string, and then request token
s on an as-needed basis.   This approach is typically used in conjunction with the parser so that you can efficiently scan an entire document without a large memory burden.  With the push model, you feed the lexer a source string, but request it tokenize 
t
he entire string at once.   This approach is typically used with short sentences of text, such as when tokenizing a line for syntax highlighting.  Both approaches have their benefits, but come with pitfalls.  Since JavaScript does not use a context-free g
rammar (with regards to regular expression syntax), it is possible for the push model to incorrectly tokenize a single-line sentence where the pull model would be able to classify it properly due to generally having a larger context.}{\rtlch\fcs1 
\af31507 \ltrch\fcs0 \insrsid4998869 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3230526 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526 The lexer is internally }{\rtlch\fcs1 \af31507 \ltrch\fcs0 
\insrsid3230526\charrsid3230526 implemented by the JavaScriptLexer}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526 
 class, and is not exposed outside of the language syntax component.  It inherits much of its functionality from the VLexerBase class exposed by the kernel.
\par When using the pull model, }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526\charrsid3230526 you call GetNextTokenForParser or PeekAtNextTokenForParser}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526 
, and are returned a single integer representing the token that has been lexed.  This integer value corresponds to }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid3230526\charrsid3230526 the token enumeration JavaScriptTokenValues.}{\rtlch\fcs1 \af31507 
\ltrch\fcs0 \insrsid3230526    When using the push model, you call Tokenize, and are returned (byref) a vector of ILexerToken objects.   Each ILexerToken encodes information about not only the integer token value, but also token location, length and text.
}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid12782558   Due to the nature of these APIs, the pull model is used exclusively by the parser, and the push model is used exclusively by the syntax highlighting engine.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 
\insrsid3230526\charrsid3230526 
\par }\pard\plain \ltrpar\s1\ql \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid5460159 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 
\b\fs28\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid5460159 \hich\af31502\dbch\af31501\loch\f31502 Parser
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4998869 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid12782558 The }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid12782558 parser}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid12782558 
 is responsible for taking a stream of tokens and converting it into a directed graph of syntactical information.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1749   The tokens are pulled on an as-needed basis, with (at most) one token 
of lookahead, making the JavaScript parser LARL(1) compatible.  The parser is recursive descent instead of table driven, and is hand coded instead of generated with the aid of a parser generator.  This is a specific design decision mandated by the lack of
 error recovery present in table driven parsers and bears special discussion.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid4998869 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1749 For parsers that are used in typical compilation scenarios, using a parser generator is sufficient.  That is because the expectation on the compiler writer's part is that the user
 code is mostly correct, and only the correct case provides interesting results.  However, we do not have a typical compilation scenario.  Autocompletion generally happens when the user's input is }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \b\insrsid1749 invalid}
{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1749  (typically because a statement is incomplete).  Bec
ause of this common use case, we need a parser design that is not only able to detect syntactical errors, but determine possible corrections.  This essentially requires us to write the parser logic by hand, which lends itself to a recursive descent parser
 instead of a table driven one.
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7079078 
The parser is implemented by the JavaScriptParser class and is not exposed outside of the language syntax component directly.  Outside exposure is granted through a helper class known as the document parser manager (discussed elsewhere).
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10095861 
The parser has to main functions that pertain to parsing: generating an abstract syntax tree (to be covered later) and generating a list of autocomplete suggestions.  The actual functionality of the parser is the same regardless of why the par
sing pass happens.   In either case, an AST is generated -- but if it is not required by the caller, it is discarded silently once the parsing has finished (AST generation is inexpensive in terms of performance costs).  The majority of the parser is strai
ght-forward recursive descent that deals directly with the ECMAScript grammar.  However, there are a few parts to the parser which require a bit more discussion.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1749 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10095861 Due to the nature of the way JavaScript handles statement termination, with semicolons being optional in many instances, the logic for terminating a statement is held }{\rtlch\fcs1 \af31507 \ltrch\fcs0 
\insrsid10095861\charrsid10095861 in JavaScriptParser:: ParseStatementCompletion}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10095861 
.  However, it is up to each statement production to determine whether a statement completion is actually required, or is purely optional.
\par Error recovery is an important mechanism for the parsing engine, and we go to great lengths to recover as best we can.  However, since statement termination is optional, that makes traditional recovery much }{\rtlch\fcs1 \af31507 \ltrch\fcs0 
\insrsid10095861\charrsid10095861 more difficult in practice.  Error recovery code lives in JavaScriptParser::RecoverFromError }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10095861 
 and makes a reasonable attempt at recovering from errors.  All errors are triggered using a C++ exception so that we can unwind the statement stack to the beginning of the erroneous statement.   These exceptions are }{\rtlch\fcs1 \af31507 \ltrch\fcs0 
\b\insrsid10095861 never}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10095861  passed on to the consumer of the parser.
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7079078 Suggestions for autocomplete are handled by the SuggestionList and SuggestionInfo classes, which are exposed outside of the language syntax component (so that the legacy autocomplete engine can use them 
with the superseding autocomplete engine).  Each suggestion has a "class" it belongs to, such as keyword, or simple name.  However, some classes of suggestion are meant as placeholders to be filled out by the autocomplete engine as-needed.  For instance, 
a
 specific name can be returned, or a generic "javascript identifier" can be returned.  If a name is returned, then the SuggestionInfo object holds the name to be suggested.  But if the "javascript identifier" is returned, then the autocomplete engine is r
esponsible for performing an unqualified name lookup based on the current context.  This allows the parser to operate quickly in the case where the autocomplete engine decides it does not need to perform the more expensive lookup operations.
\par In order for the parser to operate properly when looking for suggestions, it must be passed a valid symbol table object.  This allows the parser to track completion contexts, do unqualified and qualified lookups, etc.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 
\insrsid11878175   Optionally, the parser can be passed a context objec
t, for use when performing autocomplete parsing passes.  The context tells the parser which call scope the statement is assumed to be within.  This allows the parser to perform lookups using the correct context, and narrows the field of suggestions proper
ly.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7079078 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7686517 The parser is based solely off of the language specification for ECMAScript 262 3rd edition.  No support has been implemented for the final draft version of ECMAScript 262 5th edition.}{\rtlch\fcs1 
\af31507 \ltrch\fcs0 \insrsid10952469   This is due to the fact that there have been several "final" revisions over the past year.  However, the parser is written in such a way that it should be easy enough to add support for newer language constructs.}{
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7686517\charrsid10095861 
\par }\pard\plain \ltrpar\s1\ql \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid5460159 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 
\b\fs28\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid5460159 \hich\af31502\dbch\af31501\loch\f31502 AST
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4998869 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1458114 The }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid1458114 abstract syntax tree}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1458114  or }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid1458114 AST}{\rtlch\fcs1 
\af31507 \ltrch\fcs0 \insrsid1458114  is an
 abstract representation of syntactic information.  The parser takes a stream of tokens and matches them against patterns in the grammar to determine the syntactical structure of the source code.  But the AST is a higher level representation of the syntax
 
in an application, which makes it easier to discern semantic information about the source code.  An AST is a directed graph comprised of nodes, where each node represents a syntactical element.  For instance, with a function declaration, there will be a n
o
de representing the function keyword, and it contains child nodes for the parameter list and the function body.  In this fashion, the AST effectively strips out syntax tokens (like parenthesis, commas, keywords, etc) and represents only the semantic data.
  You can then walk this graph structure if you wished to reconstitute the user's original code.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid4998869 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1458114 The AST is generally walked by using the visitor pattern, which visits each node in the graph and performs an action on it.  The JavaScriptAST.cpp defines the v
isitor structure, as well as all of the nodes involved with the syntax tree.  This functionality is not exposed outside of the syntax engine.  It is generated by the JavaScriptParser object, and manipulated by a JavaScriptAST::Visitor implementation.

\par Currently, the only visitor implementation is the DeclarationVisitor object, which lives in JavaScriptAST.cpp.  The purpose of this visitor is to process the graph, looking for declarations to add to the symbol table.  However, other visitors can be imple
m
ented to gather other information, or generate other output.  For instance, if you wanted to add a "pretty printer" to reformat the user's code, it would be implemented as a visitor on the AST.  Or, if you wanted to determine a call flow graph for the use
r's source code, you would implement that as a visitor as well.
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7686517 The majority of the AST is repetitive code due to the nature of the visitor pattern and the lack of automatic double dispatch support in C++.  So the node functionality should seem very familia
r once you've studied one of them.  The majority of the interesting work happens in the declaration visitor implementation.  The basic idea behind it is that any node pertaining to an entity we wish to add to the symbol table (typically a declaration, but
 not always) will be handled by the visitor.  For instance, when visiting a variable declaration node, we will have the identifier information, and can create a symbol and add it to the table.  
\par However, not everything is that straight-forward due to the na
ture of language.   For instance, when dealing with an assignment statement (foo = bar), if the left-hand side has not been declared in the symbol table for the current lookup context, then it is considered to be a globally accessible declaration which ne
e
ds to be added to the table.  Beyond declaration parsing, assignments are important for the symbol table so that we can flow reference information from one symbol to another.  For instance, when assigning an object literal to a local variable, the local v
ariable needs to know that it references the object literal so that autocomplete support will suggest the object literal fields.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid1458114 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7686517 Declaration parsing will gather declaration information, as well as determine return type information, reference flows through assignment}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid6040534 
, and handle calling context information.  Additionally, symbols can be supplemented with extra information from ScriptDoc comments, which are found while parsing and attached to an AST node.  The declaration parser will use the special comments t
o augment information about symbols, as well as attach the original ScriptDoc with the symbol itself for later processing.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid7686517\charrsid1458114 
\par }\pard\plain \ltrpar\s1\ql \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid9596931 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 
\b\fs28\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid9596931 \hich\af31502\dbch\af31501\loch\f31502 ScriptDoc}{\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid11686004 
\hich\af31502\dbch\af31501\loch\f31502  Support}{\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid9596931 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9596931 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10317151 We support a modified version of ScriptDoc (based on the implementation from Aptana) as a way for users to attach m
ore information to entities within their source code.  The information is attached as a special comment which can be easily parsed.  The basic form of a ScriptDoc comment is the header (/**) followed by a comment field prefixed with "*", followed by tagli
ne fields prefixed with "*", and closed with a footer (*/).  For instance:}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid9596931 
\par }\pard\plain \ltrpar\s17\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10317151 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 
\af31507 \ltrch\fcs0 \insrsid10317151 /**
\par * This is a comment
\par *
\par * @param \{Type\} This is a comment
\par */
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10317151 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10317151 
\par The ScriptDoc parser is implemented in ScriptDoc.cpp, and is internal to the language syntax project.  However, it is partially exposed by the IScriptDocCommentField interface for usage by other components.
\par The parser supports the following tags explicitly: author, alias, class description, constructor, deprecated, exception, ID, member of, method, namespace, param, proje
ct description, return, sdoc, see, since, type, version, inherits and property.  If the tag is unknown to the parser, the parser will still retain as much information as it can about the tagline in the form of an "unknown" element.  While the parser suppo
rts these tags, the declaration parser only supports the param and return tags currently, though all script doc information is associated with individual symbols.
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10952469 The symbol table retains the text for a ScriptDoc comment, and associates it with an individua
l symbol.  That means that you can get the text from a symbol, parse it with the ScriptDoc parser, and gather more information at "runtime" (instead of at "compile time", which is the parsing pass itself).  However, this should be avoided whenever possibl
e
 as it's expensive to make a parser, parse, and destroy the parser on a symbol by symbol basis.  If you find yourself wanting to do this, it would be better to devise a symbolic representation for the script doc information, and store it pre-parsed into t
he symbol table.  This is especially true since the AST already parses the entire ScriptDoc comment for the majority of symbols stored in the table.
\par }\pard\plain \ltrpar\s1\ql \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid5460159 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 
\b\fs28\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid5460159 \hich\af31502\dbch\af31501\loch\f31502 Syntax Engine
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid4998869 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10231289 The syntax engine is what ties everything together.  It is responsible for communicating with 
the code editor to aid with syntax highlighting, autocomplete and other code-driven functionality.  It is externally available via the ISyntaxInterface (exposed as part of the code editor), and implemented internally via the VJavaScriptSyntax class.}{
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid4998869 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10231289 The ma
jority of the APIs are all given an ICodeEditorDocument interface to allow the syntax engine to interrogate the document for information as-needed.  For instance, when syntax highlighting a line of code, the syntax engine can request the current line from
 the code editor document.  Once the highlight information has been determined, the syntax engine can tell the code editor document what styles to use over a range of characters.
\par The main methods of interest in the syntax engine are SetLine and GetSuggestio
ns.  The SetLine function is called when the code editor needs to syntax highlight a line.  In that case, the syntax engine gets a single line of text from the code editor, and passes it along to the parser to retrieve a stream of tokens (push model).  It
 
then loops over those tokens, setting style information as it goes.  The GetSuggestions function is called when the code editor requires an autocomplete list.  The syntax engine determines the calling context (ie: what method we're completing code inside)
,
 and then passes the line of code on to the parser.  The parser tokenizes the text (pull model), parses the source code, and returns a list of suggestions.  If that list needs expanding (for instance, to suggest any valid javascript identifier), it is the
n expanded, and all of the pertinent suggestions are handed back to the code editor document.
\par The syntax interface also provides other functionality, such as code folding, getting tooltips, checking for errors, etc.  Most of that functionality is fairly straight-forward in that the }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid12612038 
code editor document gives the syntax engine some source code information, and the syntax engine uses the parser to gather information in a way that can be processed easier.}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10231289 
\par }\pard\plain \ltrpar\s1\ql \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid7079078 \rtlch\fcs1 \ab\af31503\afs28\alang1025 \ltrch\fcs0 
\b\fs28\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31503 \ltrch\fcs0 \insrsid7079078 \hich\af31502\dbch\af31501\loch\f31502 Document Parser Manager
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid12612038 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10555661 The document parser manager is a
 helper class that wraps up parsing logic, and is the single point of entry for adding symbols to the symbol table.  It is exposed externally by the IDocumentParserManager interface, and implemented internally by the VDocumentParserManager class.}{
\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid12612038 
\par }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10555661 Document 
parsing has several steps involved with it.  The first step is to determine whether the document even needs to be parsed.  To do this, the manager generates a file representation for the current document, and checks whether that file exists in the symbol 
table, and if it does, whether the modification date of the file on disk matches the modification date in the symbol table.  If the file does not exist, or the modification dates are different, then it is parsed.
\par The parser manager makes use of a parser obj
ect to perform the parsing operation.  If the caller just wanted a parsing pass to happen without adding symbols to the table (such as a check for errors), then the AST generated by the parser is released and the pass is complete.  But if the user did wan
t to add symbols to the symbol table, then the AST is passed along to a declaration parser tree-walker, and symbols are added.  The final step is to update the file representation in the symbol table so that the modification dates match.
\par There are two ways to add an item onto the list of work items.  You can either schedule an individual file, or a batch of files (known as a }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \i\insrsid10555661 job}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10555661 
).  All parsing is done on a background thread, and the manager is responsible for maintaining the threads.  There are three signals
  exposed by the manager which allow for communication to any interested observers.  One is the parsing complete signal, which is fired when any parsing task has completed.  Another is the job complete signal, which is fired when a particular job has comp
l
eted.  The last one is the error signal, which is fired whenever there is a parsing error.  All of these signals are handed a "cookie" object which contains a unique identifier associated with the scheduled work item, and a pointer to memory the caller ma
y have filled out when scheduling the item. }{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid10555661\charrsid12612038 
\par }{\*\themedata 504b030414000600080000002100828abc13fa0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb6ac3301045f785fe83d0b6d8
72ba28a5d8cea249777d2cd20f18e4b12d6a8f843409c9df77ecb850ba082d74231062ce997b55ae8fe3a00e1893f354e9555e6885647de3a8abf4fbee29bbd7
2a3150038327acf409935ed7d757e5ee14302999a654e99e393c18936c8f23a4dc072479697d1c81e51a3b13c07e4087e6b628ee8cf5c4489cf1c4d075f92a0b
44d7a07a83c82f308ac7b0a0f0fbf90c2480980b58abc733615aa2d210c2e02cb04430076a7ee833dfb6ce62e3ed7e14693e8317d8cd0433bf5c60f53fea2fe7
065bd80facb647e9e25c7fc421fd2ddb526b2e9373fed4bb902e182e97b7b461e6bfad3f010000ffff0300504b030414000600080000002100a5d6a7e7c00000
00360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4fc7060abb08
84a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b63095120f88d94fbc
52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462a1a82fe353
bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f7468656d652f7468
656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b4b0d592c9c
070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b4757e8d3f7
29e245eb2b260a0238fd010000ffff0300504b03041400060008000000210096b5ade296060000501b0000160000007468656d652f7468656d652f7468656d65
312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87615b8116d8
a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad79482a9c04
98f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b5d8a314d3c
94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab999fb7b471
7509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9699640f671
9e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd5868b37a088d1
e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d60cf03ac1a5
193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f9e7ef3f2d1
17d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be15c308d3f2
8acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a99793849c26ae6
6252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d32a423279a
668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2af074481847
bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86e877f0034e
16bafb0e258ebb4faf06b769e888340b103d3311da9750aa9d0a1cd3e4efca31a3508f6d0c5c5c398602f8e2ebc71591f5b616e24dd893aa3261fb44f95d843b
5974bb5c04f4edafb95b7892ec1108f3f98de75dc97d5772bdff7cc95d94cf672db4b3da0a6557f70db629362d72bcb0431e53c6066acac80d699a6409fb44d0
8741bdce9c0e4971624a2378cceaba830b05366b90e0ea23aaa241845368b0eb9e2612ca8c742851ca251ceccc70256d8d87265dd96361531f186c3d9058edf2
c00eafe8e1fc5c509031bb4d680e9f39a3154de0accc56ae644441edd76156d7429d995bdd88664a9dc3ad50197c38af1a0c16d684060441db02565e85f3b966
0d0713cc48a0ed6ef7dedc2dc60b17e92219e180643ed27acffba86e9c94c78ab90980d8a9f0913ee49d62b512b79626fb06dccee2a432bbc60276b9f7dec44b
7904cfbca4f3f6443ab2a49c9c2c41476dafd55c6e7ac8c769db1bc399161ee314bc2e75cf8759081743be1236ec4f4d6693e5336fb672c5dc24a8c33585b5fb
9cc24e1d4885545b58463634cc5416022cd19cacfccb4d30eb45296023fd35a458598360f8d7a4003bbaae25e331f155d9d9a5116d3bfb9a95523e51440ca2e0
088dd844ec6370bf0e55d027a012ae264c45d02f708fa6ad6da6dce29c255df9f6cae0ec38666984b372ab5334cf640b37795cc860de4ae2816e95b21be5ceaf
8a49f90b52a51cc6ff3355f47e0237052b81f6800fd7b802239daf6d8f0b1571a8426944fdbe80c6c1d40e8816b88b8569082ab84c36ff0539d4ff6dce591a26
ade1c0a7f669880485fd484582903d284b26fa4e2156cff62e4b9265844c4495c495a9157b440e091bea1ab8aaf7760f4510eaa69a6465c0e04ec69ffb9e65d0
28d44d4e39df9c1a52ecbd3607fee9cec7263328e5d661d3d0e4f62f44acd855ed7ab33cdf7bcb8ae889599bd5c8b3029895b6825696f6af29c239b75a5bb1e6
345e6ee6c28117e73586c1a2214ae1be07e93fb0ff51e133fb65426fa843be0fb515c187064d0cc206a2fa926d3c902e907670048d931db4c1a44959d366ad93
b65abe595f70a75bf03d616c2dd959fc7d4e6317cd99cbcec9c58b34766661c7d6766ca1a9c1b327531486c6f941c638c67cd22a7f75e2a37be0e82db8df9f30
254d30c1372581a1f51c983c80e4b71ccdd28dbf000000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f74
68656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f24
51eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198
720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528
a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100828abc13fa0000001c0200001300000000000000000000000000
000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b000000000000000000000000
002b0100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000140200007468
656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d001400060008000000210096b5ade296060000501b000016000000000000000000
00000000d10200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b010000270000000000
00000000000000009b0900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000960a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e352e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffffec69d9888b8b3d4c859eaf6cd158be0f0000000000000000000000002024
ffa8bf2ccb01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}